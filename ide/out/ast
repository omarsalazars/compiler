{
    "declarations": [
        {
            "int": [
                "x int",
                "y int",
                "z int"
            ]
        },
        {
            "real": [
                "a real",
                "b real",
                "c real"
            ]
        }
    ],
    "statements": [
        {
            "prod": "suma := ERROR: variable indefinida",
            "expr": "45 val=45",
            "type": "int"
        },
        {
            "prod": "x := ERROR: Tipos incompatibles",
            "expr": "32.32 val=32.32",
            "type": "float"
        },
        {
            "prod": "x := 23",
            "expr": "23 val=23",
            "type": "int"
        },
        {
            "prod": "y := 4",
            "expr": {
                "- val=4": {
                    "+ val=5": [
                        "2 val=2",
                        "3 val=3"
                    ],
                    "1": "1 val=1"
                }
            },
            "type": "int"
        },
        {
            "prod": "z := 11",
            "expr": {
                "+ val=11": [
                    "y val=4",
                    "7 val=7"
                ]
            },
            "type": "int"
        },
        {
            "prod": "y := 5",
            "expr": {
                "+ val=5": [
                    "y val=4",
                    "1 val=1"
                ]
            },
            "type": "int"
        },
        {
            "prod": "a := 61.0",
            "expr": {
                "- val=61.0": {
                    "+ val=62.0": {
                        "- val=28.0": {
                            "+ val=28.0": [
                                "24.0 val=24.0",
                                "4 val=4"
                            ],
                            "* val=0": {
                                "/ val=0": [
                                    "1 val=1",
                                    "3 val=3"
                                ],
                                "2": "2 val=2"
                            }
                        },
                        "34": "34 val=34"
                    },
                    "1": "1 val=1"
                }
            },
            "type": "float"
        },
        {
            "prod": "x := 8",
            "expr": {
                "* val=8": {
                    "- val=2": [
                        "5 val=5",
                        "3 val=3"
                    ],
                    "/ val=4": [
                        "8 val=8",
                        "2 val=2"
                    ]
                }
            },
            "type": "int"
        },
        {
            "prod": "y := -2",
            "expr": {
                "- val=-2": {
                    "- val=7": {
                        "+ val=8": [
                            "5 val=5",
                            "3 val=3"
                        ],
                        "/ val=1": {
                            "* val=8": [
                                "2 val=2",
                                "4 val=4"
                            ],
                            "7": "7 val=7"
                        }
                    },
                    "9": "9 val=9"
                }
            },
            "type": "int"
        },
        {
            "prod": "z := 64",
            "expr": {
                "+ val=64": {
                    "/ val=4": [
                        "8 val=8",
                        "2 val=2"
                    ],
                    "* val=60": [
                        "15 val=15",
                        "4 val=4"
                    ]
                }
            },
            "type": "int"
        },
        {
            "prod": "y := ERROR: Tipos incompatibles",
            "expr": "14.54 val=14.54",
            "type": "float"
        },
        {
            "prod": "if val=False",
            "condition": {
                "relExp val=False op=>": {
                    "prod": ">",
                    "left": "2 val=2",
                    "right": "3 val=3"
                }
            },
            "statements": {
                "statements": [
                    {
                        "prod": "w := ERROR: variable indefinida",
                        "expr": {
                            "+ val=None": [
                                "w",
                                "3 val=3"
                            ]
                        },
                        "type": "float"
                    }
                ],
                "prod": "statements"
            },
            "else": {
                "elseNode": [
                    {
                        "prod": "if val=True",
                        "condition": {
                            "relExp val=True op=>": {
                                "prod": ">",
                                "left": "4 val=4",
                                "right": "2 val=2"
                            }
                        },
                        "statements": {
                            "statements": [
                                {
                                    "prod": "b := 3.2",
                                    "expr": "3.2 val=3.2",
                                    "type": "float"
                                }
                            ],
                            "prod": "statements"
                        },
                        "else": {
                            "elseNode": [
                                {
                                    "prod": "c := 5.0",
                                    "expr": "5.0 val=5.0",
                                    "type": "float"
                                }
                            ],
                            "prod": "elseNode"
                        }
                    },
                    {
                        "prod": "v := ERROR: variable indefinida",
                        "expr": {
                            "+ val=None": [
                                "v",
                                "1 val=1"
                            ]
                        },
                        "type": "float"
                    }
                ],
                "prod": "elseNode"
            }
        },
        {
            "prod": "a := 62.0",
            "expr": {
                "+ val=62.0": [
                    "a val=61.0",
                    "1 val=1"
                ]
            },
            "type": "float"
        },
        {
            "prod": "c := 4.0",
            "expr": {
                "- val=4.0": [
                    "c val=5.0",
                    "1 val=1"
                ]
            },
            "type": "float"
        },
        {
            "prod": "x := 7",
            "expr": {
                "+ val=7": [
                    "3 val=3",
                    "4 val=4"
                ]
            },
            "type": "int"
        },
        {
            "prod": "do-until val=False",
            "statements": [
                {
                    "prod": "y := -1",
                    "expr": {
                        "+ val=-1": {
                            "* val=-2": {
                                "+ val=-1": [
                                    "y val=-2",
                                    "1 val=1"
                                ],
                                "2": "2 val=2"
                            },
                            "1": "1 val=1"
                        }
                    },
                    "type": "int"
                },
                {
                    "prod": "while val=False",
                    "block": {
                        "statements": [
                            {
                                "prod": "x := 6",
                                "expr": {
                                    "+ val=6": {
                                        "6": "6 val=6",
                                        "/ val=0": {
                                            "* val=0": {
                                                "/ val=0": [
                                                    "8 val=8",
                                                    "9 val=9"
                                                ],
                                                "8": "8 val=8"
                                            },
                                            "3": "3 val=3"
                                        }
                                    }
                                },
                                "type": "int"
                            },
                            {
                                "prod": "cin x"
                            },
                            {
                                "prod": "mas := ERROR: variable indefinida",
                                "expr": {
                                    "/ val=5": [
                                        "36 val=36",
                                        "7 val=7"
                                    ]
                                },
                                "type": "int"
                            }
                        ]
                    }
                }
            ],
            "relExpression": {
                "relExp val=False op===": {
                    "prod": "==",
                    "left": "y val=-2",
                    "right": "5 val=5"
                }
            }
        },
        {
            "prod": "while val=False",
            "block": {
                "statements": [
                    {
                        "prod": "cin mas"
                    },
                    {
                        "prod": "print",
                        "expression": {
                            "x": "x val=None",
                            "* val=15": [
                                "3 val=3",
                                "5 val=5"
                            ]
                        }
                    }
                ]
            }
        }
    ]
}